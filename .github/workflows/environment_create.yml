name: Create Environment

permissions:
  id-token: write
  contents: read

on:
  create:
  pull_request:
    types: [opened, reopened]

concurrency: ${{ github.event.number || github.ref_name }}

jobs:
  config:
    if: github.event_name == 'pull_request' || github.event.ref_type == 'branch'
    name: Get Configuration
    uses: ./.github/workflows/environment_config.yml

  upload_artifact:
    runs-on: ubuntu-latest
    steps:

      - name: Zip Up Artifact
        run: zip -r source-code.zip ${GITHUB_WORKSPACE}/*
         
      - name: Az CLI login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Upload Artifact to Azure CLI
        uses: azure/cli@v2
        with:
          azcliversion: 2.57.0
          inlineScript: az storage blob upload --account-name prsourcecodezipdemo --container-name source-code-zips --name ${{ github.head_ref }}.zip --file source-code.zip --auth-mode login --overwrite

  create_env:
    if: github.event_name == 'pull_request' || github.event.ref_type == 'branch'
    name: Create ${{ needs.config.outputs.type }} Environment
    runs-on: ubuntu-latest

    needs: config
    environment: ${{ needs.config.outputs.type }}

    env:
      ENVIRONMENT_NAME: ${{ needs.config.outputs.name }}
      ENVIRONMENT_TYPE: ${{ needs.config.outputs.type }}

    steps:
      - name: Install DevCenter CLI Extension
        run: az extension add --name devcenter --upgrade

      - name: Az CLI login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Create Environment
        run: |
          az devcenter dev environment create \
              --name ${{ env.ENVIRONMENT_NAME }} --environment-type ${{ env.ENVIRONMENT_TYPE }} \
              --dev-center ${{ vars.AZURE_DEVCENTER }} --project ${{ vars.AZURE_PROJECT }} \
              --catalog-name ${{ vars.AZURE_CATALOG }} --environment-definition-name ${{ vars.AZURE_CATALOG_ITEM }} \
              --parameters '{ "name": "${{ env.ENVIRONMENT_NAME }}", "repoUrl": "${{ github.repository }}", "branch": "${{ github.ref_name }}" }' --only-show-errors

      - name: Get Resource Group
        shell: bash {0}
        run: |
          environment_rg=$(az devcenter dev environment show --name ${{ env.ENVIRONMENT_NAME }} \
              --dev-center ${{ vars.AZURE_DEVCENTER }} --project ${{ vars.AZURE_PROJECT }} \
              --only-show-errors --query resourceGroupId --output tsv 2>&1)

          if [ $? -ne 0 ]; then
              echo "::error::az devcenter dev environment show command failed: $environment_rg"; exit 1
          fi

          environment_group=${environment_rg##*/}
          environment_sub=${environment_rg%/resourceGroups*}
          environment_sub=${environment_sub##*/}

          echo "ENVIRONMENT_GROUP=$environment_group" >> $GITHUB_ENV
          echo "ENVIRONMENT_SUB=$environment_sub" >> $GITHUB_ENV

          echo "- [View environment resources in the Azure portal](https://portal.azure.com/#@${{ vars.AZURE_TENANT_ID }}/resource$environment_rg)" >> $GITHUB_STEP_SUMMARY

      - name: Delete Environment if Failure
        if: failure()
        run: |  
          user=$(az devcenter dev environment list \
               --dev-center ${{ vars.AZURE_DEVCENTER }} --project ${{ vars.AZURE_PROJECT }} \
               --query "[?name=='${{ env.ENVIRONMENT_NAME }}'].user | [0]" --output tsv | tr -d '"' | sed 's/\r//')
          
          az devcenter dev environment delete \
              --name ${{ env.ENVIRONMENT_NAME }} \
              --dev-center ${{ vars.AZURE_DEVCENTER }} --project ${{ vars.AZURE_PROJECT }} \
              --user-id $user --yes -y